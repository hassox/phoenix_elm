Elm.Todo = Elm.Todo || {};
Elm.Todo.make = function (_elm) {
   "use strict";
   _elm.Todo = _elm.Todo || {};
   if (_elm.Todo.values) return _elm.Todo.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Html$Lazy = Elm.Html.Lazy.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var getStorage = Elm.Native.Port.make(_elm).inbound("getStorage",
   "Maybe.Maybe Todo.Model",
   function (v) {
      return v === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v === "object" && "tasks" in v && "field" in v && "uid" in v && "visibility" in v ? {_: {}
                                                                                                                                                                              ,tasks: typeof v.tasks === "object" && v.tasks instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.tasks.map(function (v) {
                                                                                                                                                                                 return typeof v === "object" && "description" in v && "completed" in v && "editing" in v && "id" in v ? {_: {}
                                                                                                                                                                                                                                                                                         ,description: typeof v.description === "string" || typeof v.description === "object" && v.description instanceof String ? v.description : _U.badPort("a string",
                                                                                                                                                                                                                                                                                         v.description)
                                                                                                                                                                                                                                                                                         ,completed: typeof v.completed === "boolean" ? v.completed : _U.badPort("a boolean (true or false)",
                                                                                                                                                                                                                                                                                         v.completed)
                                                                                                                                                                                                                                                                                         ,editing: typeof v.editing === "boolean" ? v.editing : _U.badPort("a boolean (true or false)",
                                                                                                                                                                                                                                                                                         v.editing)
                                                                                                                                                                                                                                                                                         ,id: typeof v.id === "number" && isFinite(v.id) && Math.floor(v.id) === v.id ? v.id : _U.badPort("an integer",
                                                                                                                                                                                                                                                                                         v.id)} : _U.badPort("an object with fields `description`, `completed`, `editing`, `id`",
                                                                                                                                                                                 v);
                                                                                                                                                                              })) : _U.badPort("an array",
                                                                                                                                                                              v.tasks)
                                                                                                                                                                              ,field: typeof v.field === "string" || typeof v.field === "object" && v.field instanceof String ? v.field : _U.badPort("a string",
                                                                                                                                                                              v.field)
                                                                                                                                                                              ,uid: typeof v.uid === "number" && isFinite(v.uid) && Math.floor(v.uid) === v.uid ? v.uid : _U.badPort("an integer",
                                                                                                                                                                              v.uid)
                                                                                                                                                                              ,visibility: typeof v.visibility === "string" || typeof v.visibility === "object" && v.visibility instanceof String ? v.visibility : _U.badPort("a string",
                                                                                                                                                                              v.visibility)} : _U.badPort("an object with fields `tasks`, `field`, `uid`, `visibility`",
      v));
   });
   var infoFooter = A2($Html.footer,
   _U.list([$Html$Attributes.id("info")]),
   _U.list([A2($Html.p,_U.list([]),_U.list([$Html.text("Double-click to edit a todo")]))
           ,A2($Html.p,
           _U.list([]),
           _U.list([$Html.text("Written by ")
                   ,A2($Html.a,_U.list([$Html$Attributes.href("https://github.com/evancz")]),_U.list([$Html.text("Evan Czaplicki")]))]))
           ,A2($Html.p,
           _U.list([]),
           _U.list([$Html.text("Part of "),A2($Html.a,_U.list([$Html$Attributes.href("http://todomvc.com")]),_U.list([$Html.text("TodoMVC")]))]))]));
   var is13 = function (code) {    return _U.eq(code,13) ? $Result.Ok({ctor: "_Tuple0"}) : $Result.Err("not the right key code");};
   var onEnter = F2(function (address,value) {
      return A3($Html$Events.on,
      "keydown",
      A2($Json$Decode.customDecoder,$Html$Events.keyCode,is13),
      function (_p0) {
         return A2($Signal.message,address,value);
      });
   });
   var ChangeVisibility = function (a) {    return {ctor: "ChangeVisibility",_0: a};};
   var visibilitySwap = F4(function (address,uri,visibility,actualVisibility) {
      return A2($Html.li,
      _U.list([A2($Html$Events.onClick,address,ChangeVisibility(visibility))]),
      _U.list([A2($Html.a,
      _U.list([$Html$Attributes.href(uri),$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "selected",_1: _U.eq(visibility,actualVisibility)}]))]),
      _U.list([$Html.text(visibility)]))]));
   });
   var CheckAll = function (a) {    return {ctor: "CheckAll",_0: a};};
   var Check = F2(function (a,b) {    return {ctor: "Check",_0: a,_1: b};});
   var DeleteComplete = {ctor: "DeleteComplete"};
   var controls = F3(function (address,visibility,tasks) {
      var tasksCompleted = $List.length(A2($List.filter,function (_) {    return _.completed;},tasks));
      var tasksLeft = $List.length(tasks) - tasksCompleted;
      var item_ = _U.eq(tasksLeft,1) ? " item" : " items";
      return A2($Html.footer,
      _U.list([$Html$Attributes.id("footer"),$Html$Attributes.hidden($List.isEmpty(tasks))]),
      _U.list([A2($Html.span,
              _U.list([$Html$Attributes.id("todo-count")]),
              _U.list([A2($Html.strong,_U.list([]),_U.list([$Html.text($Basics.toString(tasksLeft))])),$Html.text(A2($Basics._op["++"],item_," left"))]))
              ,A2($Html.ul,
              _U.list([$Html$Attributes.id("filters")]),
              _U.list([A4(visibilitySwap,address,"#/","All",visibility)
                      ,$Html.text(" ")
                      ,A4(visibilitySwap,address,"#/active","Active",visibility)
                      ,$Html.text(" ")
                      ,A4(visibilitySwap,address,"#/completed","Completed",visibility)]))
              ,A2($Html.button,
              _U.list([$Html$Attributes.$class("clear-completed")
                      ,$Html$Attributes.id("clear-completed")
                      ,$Html$Attributes.hidden(_U.eq(tasksCompleted,0))
                      ,A2($Html$Events.onClick,address,DeleteComplete)]),
              _U.list([$Html.text(A2($Basics._op["++"],"Clear completed (",A2($Basics._op["++"],$Basics.toString(tasksCompleted),")")))]))]));
   });
   var Delete = function (a) {    return {ctor: "Delete",_0: a};};
   var Add = {ctor: "Add"};
   var UpdateTask = F2(function (a,b) {    return {ctor: "UpdateTask",_0: a,_1: b};});
   var EditingTask = F2(function (a,b) {    return {ctor: "EditingTask",_0: a,_1: b};});
   var todoItem = F2(function (address,todo) {
      return A2($Html.li,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "completed",_1: todo.completed},{ctor: "_Tuple2",_0: "editing",_1: todo.editing}]))]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("view")]),
              _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.$class("toggle")
                              ,$Html$Attributes.type$("checkbox")
                              ,$Html$Attributes.checked(todo.completed)
                              ,A2($Html$Events.onClick,address,A2(Check,todo.id,$Basics.not(todo.completed)))]),
                      _U.list([]))
                      ,A2($Html.label,_U.list([A2($Html$Events.onDoubleClick,address,A2(EditingTask,todo.id,true))]),_U.list([$Html.text(todo.description)]))
                      ,A2($Html.button,_U.list([$Html$Attributes.$class("destroy"),A2($Html$Events.onClick,address,Delete(todo.id))]),_U.list([]))]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.$class("edit")
                      ,$Html$Attributes.value(todo.description)
                      ,$Html$Attributes.name("title")
                      ,$Html$Attributes.id(A2($Basics._op["++"],"todo-",$Basics.toString(todo.id)))
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p1) {    return A2($Signal.message,address,A2(UpdateTask,todo.id,_p1));})
                      ,A2($Html$Events.onBlur,address,A2(EditingTask,todo.id,false))
                      ,A2(onEnter,address,A2(EditingTask,todo.id,false))]),
              _U.list([]))]));
   });
   var taskList = F3(function (address,visibility,tasks) {
      var cssVisibility = $List.isEmpty(tasks) ? "hidden" : "visible";
      var allCompleted = A2($List.all,function (_) {    return _.completed;},tasks);
      var isVisible = function (todo) {
         var _p2 = visibility;
         switch (_p2)
         {case "Completed": return todo.completed;
            case "Active": return $Basics.not(todo.completed);
            default: return true;}
      };
      return A2($Html.section,
      _U.list([$Html$Attributes.id("main"),$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "visibility",_1: cssVisibility}]))]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.id("toggle-all")
                      ,$Html$Attributes.type$("checkbox")
                      ,$Html$Attributes.name("toggle")
                      ,$Html$Attributes.checked(allCompleted)
                      ,A2($Html$Events.onClick,address,CheckAll($Basics.not(allCompleted)))]),
              _U.list([]))
              ,A2($Html.label,_U.list([$Html$Attributes.$for("toggle-all")]),_U.list([$Html.text("Mark all as complete")]))
              ,A2($Html.ul,_U.list([$Html$Attributes.id("todo-list")]),A2($List.map,todoItem(address),A2($List.filter,isVisible,tasks)))]));
   });
   var UpdateField = function (a) {    return {ctor: "UpdateField",_0: a};};
   var taskEntry = F2(function (address,task) {
      return A2($Html.header,
      _U.list([$Html$Attributes.id("header")]),
      _U.list([A2($Html.h1,_U.list([]),_U.list([$Html.text("todos")]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.id("new-todo")
                      ,$Html$Attributes.placeholder("What needs to be done?")
                      ,$Html$Attributes.autofocus(true)
                      ,$Html$Attributes.value(task)
                      ,$Html$Attributes.name("newTodo")
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p3) {    return A2($Signal.message,address,UpdateField(_p3));})
                      ,A2(onEnter,address,Add)]),
              _U.list([]))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("todomvc-wrapper"),$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "visibility",_1: "hidden"}]))]),
      _U.list([A2($Html.section,
              _U.list([$Html$Attributes.id("todoapp")]),
              _U.list([A3($Html$Lazy.lazy2,taskEntry,address,model.field)
                      ,A4($Html$Lazy.lazy3,taskList,address,model.visibility,model.tasks)
                      ,A4($Html$Lazy.lazy3,controls,address,model.visibility,model.tasks)]))
              ,infoFooter]));
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var focus = Elm.Native.Port.make(_elm).outboundSignal("focus",
   function (v) {
      return v;
   },
   function () {
      var toSelector = function (act) {
         var _p4 = act;
         if (_p4.ctor === "EditingTask") {
               return A2($Basics._op["++"],"#todo-",$Basics.toString(_p4._0));
            } else {
               return "";
            }
      };
      var needsFocus = function (act) {    var _p5 = act;if (_p5.ctor === "EditingTask") {    return _p5._1;} else {    return false;}};
      return A2($Signal.map,toSelector,A3($Signal.filter,needsFocus,A2(EditingTask,0,true),actions.signal));
   }());
   var emptyModel = {tasks: _U.list([]),visibility: "All",field: "",uid: 0};
   var initialModel = A2($Maybe.withDefault,emptyModel,getStorage);
   var newTask = F2(function (desc,id) {    return {description: desc,completed: false,editing: false,id: id};});
   var update = F2(function (action,model) {
      var _p6 = action;
      switch (_p6.ctor)
      {case "NoOp": return model;
         case "Add": return _U.update(model,
           {uid: model.uid + 1
           ,field: ""
           ,tasks: $String.isEmpty(model.field) ? model.tasks : A2($Basics._op["++"],model.tasks,_U.list([A2(newTask,model.field,model.uid)]))});
         case "UpdateField": return _U.update(model,{field: _p6._0});
         case "EditingTask": var updateTask = function (t) {    return _U.eq(t.id,_p6._0) ? _U.update(t,{editing: _p6._1}) : t;};
           return _U.update(model,{tasks: A2($List.map,updateTask,model.tasks)});
         case "UpdateTask": var updateTask = function (t) {    return _U.eq(t.id,_p6._0) ? _U.update(t,{description: _p6._1}) : t;};
           return _U.update(model,{tasks: A2($List.map,updateTask,model.tasks)});
         case "Delete": return _U.update(model,{tasks: A2($List.filter,function (t) {    return !_U.eq(t.id,_p6._0);},model.tasks)});
         case "DeleteComplete": return _U.update(model,
           {tasks: A2($List.filter,function (_p7) {    return $Basics.not(function (_) {    return _.completed;}(_p7));},model.tasks)});
         case "Check": var updateTask = function (t) {    return _U.eq(t.id,_p6._0) ? _U.update(t,{completed: _p6._1}) : t;};
           return _U.update(model,{tasks: A2($List.map,updateTask,model.tasks)});
         case "CheckAll": var updateTask = function (t) {    return _U.update(t,{completed: _p6._0});};
           return _U.update(model,{tasks: A2($List.map,updateTask,model.tasks)});
         default: return _U.update(model,{visibility: _p6._0});}
   });
   var model = A3($Signal.foldp,update,initialModel,actions.signal);
   var main = A2($Signal.map,view(actions.address),model);
   var setStorage = Elm.Native.Port.make(_elm).outboundSignal("setStorage",
   function (v) {
      return {tasks: Elm.Native.List.make(_elm).toArray(v.tasks).map(function (v) {
                return {description: v.description,completed: v.completed,editing: v.editing,id: v.id};
             })
             ,field: v.field
             ,uid: v.uid
             ,visibility: v.visibility};
   },
   model);
   var Task = F4(function (a,b,c,d) {    return {description: a,completed: b,editing: c,id: d};});
   var Model = F4(function (a,b,c,d) {    return {tasks: a,field: b,uid: c,visibility: d};});
   return _elm.Todo.values = {_op: _op
                             ,Model: Model
                             ,Task: Task
                             ,newTask: newTask
                             ,emptyModel: emptyModel
                             ,NoOp: NoOp
                             ,UpdateField: UpdateField
                             ,EditingTask: EditingTask
                             ,UpdateTask: UpdateTask
                             ,Add: Add
                             ,Delete: Delete
                             ,DeleteComplete: DeleteComplete
                             ,Check: Check
                             ,CheckAll: CheckAll
                             ,ChangeVisibility: ChangeVisibility
                             ,update: update
                             ,view: view
                             ,onEnter: onEnter
                             ,is13: is13
                             ,taskEntry: taskEntry
                             ,taskList: taskList
                             ,todoItem: todoItem
                             ,controls: controls
                             ,visibilitySwap: visibilitySwap
                             ,infoFooter: infoFooter
                             ,main: main
                             ,model: model
                             ,initialModel: initialModel
                             ,actions: actions};
};